AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: tracebox
Globals:
  Function:
    Runtime: java11
    Timeout: 30
    MemorySize: 512

Parameters:
  Stage:
    Type: String
  Env:
    Type: String
  AwsId:
    Type: String
  Region:
    Type: String

Resources:
  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "${Stage} - moreDraw - REST"
      FailOnWarnings: true
      Body:
        'Fn::Transform':
          Name: 'AWS::Include'
          Parameters:
            Location: s3://moredraw/deploy/api_rest.json

  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub "${Stage} - moreDraw - HTTP"
      ProtocolType: HTTP
      Body:
        'Fn::Transform':
          Name: 'AWS::Include'
          Parameters:
            Location: s3://moredraw/deploy/api_http.json


  #   Funções Lambda

  postUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Architectures:
        - x86_64
      SnapStart:
        ApplyOn: PublishedVersions
      MemorySize: 3008
      FunctionName: !Join ["", [!Ref Stage, "-postUser"]]
      Environment:
        Variables:
          ENV: !Ref Env
      CodeUri: users/post_user/target/post_user-1.0.jar
      Handler: handler.PostUsersHandler::handleRequest
      Events:
        List:
          Type: HttpApi
          Properties:
            Path: /users
            Method: POST
            ApiId: !Ref HttpApi
#          WarmingSchedule:
#            Type: Schedule
#            Properties:
#              Schedule: rate(6 minutes)
#              Input: '{"headers": {"x-api-key": "your_api_key_here"}}'
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:GetItem
                - dynamodb:Scan
                - dynamodb:Query
                - dynamodb:UpdateItem
                - dynamodb:DeleteItem
              Resource:
                - !Join ["", ["arn:aws:dynamodb:", !Ref Region, ":", !Ref AwsId, ":table/", !Ref Env, "_user/federalTax"]]
                - !Join ["", ["arn:aws:dynamodb:", !Ref Region, ":", !Ref AwsId, ":table/", !Ref Env, "_user"]]
#                - "arn:aws:sns:*:*:*"


  postUsersLoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      Architectures:
        - x86_64
      SnapStart:
        ApplyOn: PublishedVersions
      MemorySize: 3000
      FunctionName: !Join ["", [!Ref Stage, "-postUsersLogin"]]
      Environment:
        Variables:
          ENV: !Ref Env
      CodeUri: users/post_users_login/target/post_users_login-1.0.jar
      Handler: handler.PostUsersLoginHandler::handleRequest
      Events:
        List:
          Type: HttpApi
          Properties:
            Path: /users/login
            Method: POST
            ApiId: !Ref HttpApi
#        WarmingSchedule:
#          Type: Schedule
#          Properties:
#            Schedule: rate(6 minutes)
#            Input: '{"headers": {"x-api-key": "your_api_key_here"}}'
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:GetItem
                - dynamodb:Scan
                - dynamodb:Query
                - dynamodb:UpdateItem
                - dynamodb:DeleteItem
              Resource:
                - !Join ["", ["arn:aws:dynamodb:", !Ref Region, ":", !Ref AwsId, ":table/", !Ref Env, "_user/index/federalTax"]]
                - !Join ["", ["arn:aws:dynamodb:", !Ref Region, ":", !Ref AwsId, ":table/", !Ref Env, "_user"]]

  postUsersVerifyFunction:
    Type: AWS::Serverless::Function
    Properties:
      Architectures:
        - x86_64
      SnapStart:
        ApplyOn: PublishedVersions
      FunctionName: !Join ["", [!Ref Stage, "-postUsersVerify"]]
      Environment:
        Variables:
          ENV: !Ref Env
      CodeUri: users/post_users_verify/target/post_users_verify-1.0.jar
      Handler: handler.PostUsersVerifyHandler::handleRequest
      Events:
        List:
          Type: HttpApi
          Properties:
            Path: /users/verify
            Method: POST
            ApiId: !Ref HttpApi
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:GetItem
                - dynamodb:Scan
                - dynamodb:Query
                - dynamodb:UpdateItem
                - dynamodb:BatchWriteItem
                - sns:Subscribe
                - sns:Publish
                - sns:CreateTopic
                - sns:SetTopicAttributes
              Resource:
                - !Join ["", ["arn:aws:dynamodb:", !Ref Region, ":", !Ref AwsId, ":table/", !Ref Env, "_user/index/federalTax"]]
                - !Join ["", ["arn:aws:dynamodb:", !Ref Region, ":", !Ref AwsId, ":table/", !Ref Env, "_user"]]

  putUsersVerifyFunction:
    Type: AWS::Serverless::Function
    Properties:
      Architectures:
        - x86_64
      SnapStart:
        ApplyOn: PublishedVersions
      FunctionName: !Join ["", [!Ref Stage, "-putUsersVerify"]]
      Environment:
        Variables:
          ENV: !Ref Env
      CodeUri: users/put_users_verify/target/put_users_verify-1.0.jar
      Handler: handler.PutUsersVerifyHandler::handleRequest
      Events:
        List:
          Type: HttpApi
          Properties:
            Path: /users/verify
            Method: PUT
            ApiId: !Ref HttpApi
#      Role: "arn:aws:iam::170387992571:role/sns-lambda-moreDraw"

  putUsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      Architectures:
        - x86_64
      SnapStart:
        ApplyOn: PublishedVersions
      FunctionName: !Join ["", [!Ref Stage, "-putUsers"]]
      Environment:
        Variables:
          ENV: !Ref Env
      CodeUri: users/put_users/target/put_users-1.0.jar
      Handler: handler.PutUsersHandler::handleRequest
      Events:
        List:
          Type: HttpApi
          Properties:
            Path: /users/{userId}
            Method: PUT
            ApiId: !Ref HttpApi
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:DeleteItem
                - dynamodb:PutItem
                - dynamodb:GetItem
                - dynamodb:Scan
                - dynamodb:Query
                - dynamodb:UpdateItem
              Resource:
                - !Join ["", ["arn:aws:dynamodb:", !Ref Region, ":", !Ref AwsId, ":table/", !Ref Env, "_user/index/federalTax"]]
                - !Join ["", ["arn:aws:dynamodb:", !Ref Region, ":", !Ref AwsId, ":table/", !Ref Env, "_user"]]
#      Role: "arn:aws:iam::170387992571:role/sns-lambda-moreDraw"

  postUsersForgetPasswordFunction:
    Type: AWS::Serverless::Function
    Properties:
      Architectures:
        - x86_64
      SnapStart:
        ApplyOn: PublishedVersions
      FunctionName: !Join ["", [!Ref Stage, "-postUsersForgetPassword"]]
      Environment:
        Variables:
          ENV: !Ref Env
      CodeUri: users/post_users_forget_password/target/post_users_forget_password-1.0.jar
      Handler: handler.PostUsersForgetPasswordHandler::handleRequest
      Events:
        List:
          Type: HttpApi
          Properties:
            Path: /users/password/forget
            Method: POST
            ApiId: !Ref HttpApi
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:GetItem
                - dynamodb:Scan
                - dynamodb:Query
                - dynamodb:UpdateItem
                - sns:Publish
                - sns:CreateTopic
                - sns:SetTopicAttributes
              Resource:
                - !Join ["", ["arn:aws:dynamodb:", !Ref Region, ":", !Ref AwsId, ":table/", !Ref Env, "_user/index/federalTax"]]
                - !Join ["", ["arn:aws:dynamodb:", !Ref Region, ":", !Ref AwsId, ":table/", !Ref Env, "_user"]]
#      Role: "arn:aws:iam::170387992571:role/sns-lambda-moreDraw"

  postUsersVerifyPasswordFunction:
    Type: AWS::Serverless::Function
    Properties:
      Architectures:
        - x86_64
      SnapStart:
        ApplyOn: PublishedVersions
      FunctionName: !Join ["", [!Ref Stage, "-postUsersVerifyPassword"]]
      Environment:
        Variables:
          ENV: !Ref Env
      CodeUri: users/post_users_verify_password/target/post_users_verify_password-1.0.jar
      Handler: handler.PostUsersVerifyPasswordHandler::handleRequest
      Events:
        List:
          Type: HttpApi
          Properties:
            Path: /users/password/verify
            Method: POST
            ApiId: !Ref HttpApi
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:GetItem
                - dynamodb:Scan
                - dynamodb:Query
                - dynamodb:UpdateItem
              Resource:
                - !Join ["", ["arn:aws:dynamodb:", !Ref Region, ":", !Ref AwsId, ":table/", !Ref Env, "_user/index/federalTax"]]
                - !Join ["", ["arn:aws:dynamodb:", !Ref Region, ":", !Ref AwsId, ":table/", !Ref Env, "_user"]]

  deleteUsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      Architectures:
        - x86_64
      SnapStart:
        ApplyOn: PublishedVersions
      FunctionName: !Join ["", [!Ref Stage, "-deleteUsers"]]
      Environment:
        Variables:
          ENV: !Ref Env
      CodeUri: users/delete_users/target/delete_users-1.0.jar
      Handler: handler.DeleteUsersHandler::handleRequest
      Events:
        List:
          Type: HttpApi
          Properties:
            Path: /users
            Method: DELETE
            ApiId: !Ref HttpApi
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:GetItem
                - dynamodb:Scan
                - dynamodb:Query
              Resource:
                - !Join ["", ["arn:aws:dynamodb:", !Ref Region, ":", !Ref AwsId, ":table/", !Ref Env, "_user/index/federalTax"]]
                - !Join ["", ["arn:aws:dynamodb:", !Ref Region, ":", !Ref AwsId, ":table/", !Ref Env, "_user"]]

    ### ImageId ###
    getImageIdFunction:
      Type: AWS::Serverless::Function
      Properties:
        Architectures:
          - x86_64
        SnapStart:
          ApplyOn: PublishedVersions
        FunctionName:
          Fn::Join: [ "", [ !Ref Stage, "-getImageId" ] ]
        Environment:
          Variables:
            ENV: !Ref Env
        CodeUri: imageId/get_imageId/target/get_imageId-1.0.jar
        Handler: handler.GetImageIdHandler::handleRequest
        Events:
          List:
            Type: Api
            Properties:
              Path: /imageId/{imageId}
              Method: GET
              RestApiId:
                Ref: RestApi
        Policies:
          - Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "dynamodb:GetItem"
                  - "dynamodb:Scan"
                  - "dynamodb:Query"
                  - "dynamodb:PutItem"
                  - "dynamodb:UpdateItem"
                Resource:
                  - Fn::Join: [ "", [ "arn:aws:dynamodb:", !Ref Region, ":", !Ref AwsId, ":table/", !Ref Env, "_image/index/createdBy-created" ] ]
                  - Fn::Join: [ "", [ "arn:aws:dynamodb:", !Ref Region, ":", !Ref AwsId, ":table/", !Ref Env, "_image" ] ]
                  - Fn::Join: [ "", [ "arn:aws:dynamodb:", !Ref Region, ":", !Ref AwsId, ":table/", !Ref Env, "_user" ] ]
    postImageIdFunction:
      Type: AWS::Serverless::Function
      Properties:
        Architectures:
          - x86_64
        SnapStart:
          ApplyOn: PublishedVersions
        FunctionName:
          Fn::Join: [ "", [ !Ref Stage, "-postImageId" ] ]
        Environment:
          Variables:
            ENV: !Ref Env
        CodeUri: imageId/post_imageId/target/post_imageId-1.0.jar
        Handler: handler.PostImageIdHandler::handleRequest
        Events:
          List:
            Type: Api
            Properties:
              Path: /imageId
              Method: POST
              RestApiId:
                Ref: RestApi
        Policies:
          - Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "dynamodb:GetItem"
                  - "dynamodb:Scan"
                  - "dynamodb:Query"
                  - "dynamodb:PutItem"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:BatchWriteItem"
                Resource:
                  - Fn::Join: [ "", [ "arn:aws:dynamodb:", !Ref Region, ":", !Ref AwsId, ":table/", !Ref Env, "_image/index/createdBy-created" ] ]
                  - Fn::Join: [ "", [ "arn:aws:dynamodb:", !Ref Region, ":", !Ref AwsId, ":table/", !Ref Env, "_image" ] ]
                  - Fn::Join: [ "", [ "arn:aws:dynamodb:", !Ref Region, ":", !Ref AwsId, ":table/", !Ref Env, "_user" ] ]
    putImageIdPictureFunction:
      Type: AWS::Serverless::Function
      Properties:
        Architectures:
          - x86_64
        SnapStart:
          ApplyOn: PublishedVersions
        FunctionName:
          Fn::Join: [ "", [ !Ref Stage, "-putImageIdPicture" ] ]
        Environment:
          Variables:
            ENV: !Ref Env
        CodeUri: imageId/put_imageId_picture/target/put_imageId_picture-1.0.jar
        Handler: handler.PutImageIdPictureHandler::handleRequest
        Events:
          List:
            Type: Api
            Properties:
              Path: /imageId/picture/{imageId}
              Method: PUT
              RestApiId:
                Ref: RestApi
        Policies:
          - Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "dynamodb:PutItem"
                  - "dynamodb:GetItem"
                  - "dynamodb:Scan"
                  - "dynamodb:Query"
                  - "dynamodb:UpdateItem"
                  - "s3:GetObject"
                  - "s3:PutObject"
                  - "s3:DeleteObject"
                Resource:
                  - "arn:aws:s3:::Nome do bucket"
                  - Fn::Join: [ "", [ "arn:aws:dynamodb:", !Ref Region, ":", !Ref AwsId, ":table/", !Ref Env, "_image/index/createdBy-created" ] ]
                  - Fn::Join: [ "", [ "arn:aws:dynamodb:", !Ref Region, ":", !Ref AwsId, ":table/", !Ref Env, "_image" ] ]
                  - Fn::Join: [ "", [ "arn:aws:dynamodb:", !Ref Region, ":", !Ref AwsId, ":table/", !Ref Env, "_user" ] ]

    putImageIdFunction:
      Type: AWS::Serverless::Function
      Properties:
        Architectures:
          - x86_64
        SnapStart:
          ApplyOn: PublishedVersions
        FunctionName:
          Fn::Join: [ "", [ !Ref Stage, "-putImageId" ] ]
        Environment:
          Variables:
            ENV: !Ref Env
        CodeUri: imageId/put_imageId/target/put_imageId-1.0.jar
        Handler: handler.PutImageIdHandler::handleRequest
        Events:
          List:
            Type: Api
            Properties:
              Path: /imageId/{imageId}
              Method: PUT
              RestApiId:
                Ref: RestApi
        Policies:
          - Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "dynamodb:GetItem"
                  - "dynamodb:Scan"
                  - "dynamodb:Query"
                  - "dynamodb:PutItem"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:BatchWriteItem"
                Resource:
                  - Fn::Join: [ "", [ "arn:aws:dynamodb:", !Ref Region, ":", !Ref AwsId, ":table/", !Ref Env, "_image/index/createdBy-created" ] ]
                  - Fn::Join: [ "", [ "arn:aws:dynamodb:", !Ref Region, ":", !Ref AwsId, ":table/", !Ref Env, "_image" ] ]
                  - Fn::Join: [ "", [ "arn:aws:dynamodb:", !Ref Region, ":", !Ref AwsId, ":table/", !Ref Env, "_user" ] ]

    deleteImageIdFunction:
      Type: AWS::Serverless::Function
      Properties:
        Architectures:
          - x86_64
        SnapStart:
          ApplyOn: PublishedVersions
        FunctionName:
          Fn::Join: [ "", [ !Ref Stage, "-deleteImageId" ] ]
        Environment:
          Variables:
            ENV: !Ref Env
        CodeUri: imageId/delete_imageId/target/delete_imageId-1.0.jar
        Handler: handler.DeleteImageIdHandler::handleRequest
        Events:
          List:
            Type: Api
            Properties:
              Path: /imageId/{imageId}
              Method: Delete
              RestApiId:
                Ref: RestApi
        Policies:
          - Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "dynamodb:GetItem"
                  - "dynamodb:Scan"
                  - "dynamodb:DeleteItem"
                  - "dynamodb:Query"
                  - "dynamodb:PutItem"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:BatchWriteItem"
                Resource:
                  - Fn::Join: [ "", [ "arn:aws:dynamodb:", !Ref Region, ":", !Ref AwsId, ":table/", !Ref Env, "_image/index/createdBy-created" ] ]
                  - Fn::Join: [ "", [ "arn:aws:dynamodb:", !Ref Region, ":", !Ref AwsId, ":table/", !Ref Env, "_image" ] ]

