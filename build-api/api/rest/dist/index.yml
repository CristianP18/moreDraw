---
  openapi: "3.0.2"
  info: 
    title: "stageVariables.Stage - moreDraw - REST"
    description: "moreDraw - REST"
    version: "0.0.1"
  tags: 
    - 
      name: "Usuários"
      description: "Os usuários representam a entidade mais simplória de uma pessoa física.\nEles podem pertencer a equipes sendo possível executar uma tarefa, realizar operações de remetente e destinatário, realizar a gestão de seus unitizadores, etiquetas e favoritos."
    - 
      name: "Imagem"
      description: "Componentes Gráficos."
  servers: 
    - 
      url: "https://api.moreDraw.com.br/{environment}"
      variables: 
        environment: 
          default: "v1"
          enum: 
            - "dev"
            - "v1"
  paths: 
    /users/find: 
      get: 
        description: "Esta API é utilizada para capturar os detalhes de um usuário ou cliente em específico por intermédio do CPF/CNPJ, Telefone/Celular ou Nome do mesmo.\nNecessário informar o CPF/CNPJ, telefone celular ou nome no caminho da requisição."
        operationId: "getUsersFind"
        summary: "Captura usuário ou cliente pelo CPF/CNPJ, Telefone/Celular ou Nome"
        security: 
          - 
            bearerAuth: []
        tags: 
          - "Usuários"
        parameters: 
          - 
            name: "federalTax"
            description: "CPF ou CNPJ do respectivo usuario ou cliente."
            example: "12345678900"
            in: "query"
            required: false
            schema: 
              type: "string"
          - 
            name: "mobilePhone"
            description: "Telefone celular do respectivo usuario ou cliente."
            example: "5500912345678"
            in: "query"
            required: false
            schema: 
              type: "string"
          - 
            name: "name"
            description: "Nome da razão social, fantasia da empresa, pessoa fisica ou jurídica"
            example: "Nome exemplo"
            in: "query"
            required: false
            schema: 
              type: "string"
        x-amazon-apigateway-integration: 
          uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:170387992571:function:${stageVariables.Stage}-getUsersFind/invocations"
          passthroughBehavior: "when_no_match"
          httpMethod: "POST"
          type: "aws_proxy"
        responses: 
          200: 
            description: "Usuário capturado com sucesso"
            content: 
              application/json: 
                schema: 
                  oneOf: 
                    - 
                      $ref: "#/components/schemas/UserResponse"
                    - 
                      $ref: "#/components/schemas/ClientResponse"
            headers: 
              Access-Control-Allow-Origin: 
                $ref: "#/components/headers/Access-Control-Allow-Origin"
              Access-Control-Allow-Methods: 
                $ref: "#/components/headers/Access-Control-Allow-Methods"
              Access-Control-Allow-Headers: 
                $ref: "#/components/headers/Access-Control-Allow-Headers"
          400: 
            description: "BadRequest"
            content: 
              application/json: 
                schema: 
                  $ref: "#/components/schemas/BadRequest"
          401: 
            description: "Unauthorized"
            content: 
              application/json: 
                schema: 
                  $ref: "#/components/schemas/Unauthorized"
          404: 
            description: "NotFound"
            content: 
              application/json: 
                schema: 
                  $ref: "#/components/schemas/NotFound"
          500: 
            description: "InternalServer"
            content: 
              application/json: 
                schema: 
                  $ref: "#/components/schemas/InternalServer"
      options: 
        summary: "CORS support"
        description: "Enable CORS by returning correct headers\n"
        tags: 
          - "CORS"
        requestBody: 
          required: true
          content: 
            application/json: 
              schema: 
                $ref: "#/components/schemas/CreatePodPic"
        responses: 
          200: 
            description: "Default response for CORS method"
            headers: 
              Access-Control-Allow-Origin: 
                schema: 
                  type: "string"
              Access-Control-Allow-Methods: 
                schema: 
                  type: "string"
              Access-Control-Allow-Headers: 
                schema: 
                  type: "string"
            content: {}
          400: 
            $ref: "#/components/schemas/BadRequest"
            headers: 
              Access-Control-Allow-Origin: 
                schema: 
                  type: "string"
              Access-Control-Allow-Methods: 
                schema: 
                  type: "string"
              Access-Control-Allow-Headers: 
                schema: 
                  type: "string"
          401: 
            $ref: "#/components/schemas/Unauthorized"
            headers: 
              Access-Control-Allow-Origin: 
                schema: 
                  type: "string"
              Access-Control-Allow-Methods: 
                schema: 
                  type: "string"
              Access-Control-Allow-Headers: 
                schema: 
                  type: "string"
          404: 
            $ref: "#/components/schemas/NotFound"
            headers: 
              Access-Control-Allow-Origin: 
                schema: 
                  type: "string"
              Access-Control-Allow-Methods: 
                schema: 
                  type: "string"
              Access-Control-Allow-Headers: 
                schema: 
                  type: "string"
          500: 
            $ref: "#/components/schemas/InternalServer"
            headers: 
              Access-Control-Allow-Origin: 
                schema: 
                  type: "string"
              Access-Control-Allow-Methods: 
                schema: 
                  type: "string"
              Access-Control-Allow-Headers: 
                schema: 
                  type: "string"
        x-amazon-apigateway-integration: 
          type: "mock"
          requestTemplates: 
            application/json: "{\n  \"statusCode\" : 200\n}\n"
          responses: 
            default: 
              statusCode: "200"
              responseParameters: 
                method.response.header.Access-Control-Allow-Headers: "'X-Requested-With,Accept,Origin,Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                method.response.header.Access-Control-Allow-Methods: "'*'"
                method.response.header.Access-Control-Allow-Origin: "'*'"
              responseTemplates: 
                application/json: "{}\n"
    /image/{imageId}: 
      get: 
        description: "Esta API é utilizada para capturar os detalhes de uma imagem associada a um pátio. Ao informar \"all\" como parâmetro, retorna todas as imagens disponíveis.\n"
        operationId: "getImage"
        summary: "Captura detalhes de uma imagem de pátio"
        security: 
          - 
            bearerAuth: []
        tags: 
          - "Image"
        x-amazon-apigateway-integration: 
          uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:170387992571:function:${stageVariables.Stage}-getImage/invocations"
          payloadFormatVersion: "2.0"
          type: "aws_proxy"
          httpMethod: "GET"
        parameters: 
          - 
            name: "imageId"
            in: "query"
            required: false
            description: "O identificador único da imagem a ser capturada. Use \"all\" para listar todas as imagens."
            schema: 
              type: "string"
        responses: 
          200: 
            description: "Imagem ou lista de imagens capturada(s) com sucesso."
            content: 
              application/json: 
                schema: 
                  type: "array"
                  items: 
                    $ref: "#/components/schemas/Image"
            headers: 
              Access-Control-Allow-Origin: 
                $ref: "#/components/headers/Access-Control-Allow-Origin"
              Access-Control-Allow-Methods: 
                $ref: "#/components/headers/Access-Control-Allow-Methods"
              Access-Control-Allow-Headers: 
                $ref: "#/components/headers/Access-Control-Allow-Headers"
          401: 
            description: "Não autorizado"
            content: 
              application/json: 
                schema: 
                  $ref: "#/components/schemas/Unauthorized"
          404: 
            description: "Recurso não encontrado"
            content: 
              application/json: 
                schema: 
                  $ref: "#/components/schemas/NotFound"
          500: 
            description: "Erro interno do servidor"
            content: 
              application/json: 
                schema: 
                  $ref: "#/components/schemas/InternalServer"
      put: 
        description: "Esta API é utilizada para atualizar uma imagem existente no sistema. É necessário informar o identificador único da imagem no caminho da requisição. Os atributos atualizáveis da imagem devem ser fornecidos no corpo da requisição.\n"
        operationId: "putImage"
        summary: "Atualiza uma imagem existente"
        security: 
          - 
            bearerAuth: []
        tags: 
          - "Image"
        parameters: 
          - 
            name: "imageId"
            in: "path"
            required: true
            description: "O identificador único da imagem que será atualizado."
            schema: 
              type: "string"
        x-amazon-apigateway-integration: 
          uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:170387992571:function:${stageVariables.Stage}-putImage/invocations"
          passthroughBehavior: "when_no_match"
          httpMethod: "PUT"
          type: "aws_proxy"
        requestBody: 
          required: true
          content: 
            application/json: 
              schema: 
                $ref: "#/components/schemas/Image"
        responses: 
          200: 
            description: "Imagem atualizada com sucesso."
            content: 
              application/json: 
                schema: 
                  $ref: "#/components/schemas/Image"
            headers: 
              Access-Control-Allow-Origin: 
                $ref: "#/components/headers/Access-Control-Allow-Origin"
              Access-Control-Allow-Methods: 
                $ref: "#/components/headers/Access-Control-Allow-Methods"
              Access-Control-Allow-Headers: 
                $ref: "#/components/headers/Access-Control-Allow-Headers"
          400: 
            description: "Requisição inválida. Verifique os atributos informados."
            content: 
              application/json: 
                schema: 
                  $ref: "#/components/schemas/BadRequest"
          401: 
            description: "Não autorizado. Token de autenticação inválido ou ausente."
            content: 
              application/json: 
                schema: 
                  $ref: "#/components/schemas/Unauthorized"
          404: 
            description: "Recurso não encontrado."
            content: 
              application/json: 
                schema: 
                  $ref: "#/components/schemas/NotFound"
          500: 
            description: "Erro interno do servidor."
            content: 
              application/json: 
                schema: 
                  $ref: "#/components/schemas/InternalServer"
      delete: 
        description: "Esta API é utilizada para excluir uma imagem existente no sistema. É necessário informar o identificador único da imagem no caminho da requisição.\n"
        operationId: "deleteImage"
        summary: "Exclui uma imagem existente"
        security: 
          - 
            bearerAuth: []
        tags: 
          - "Image"
        parameters: 
          - 
            name: "imageId"
            in: "path"
            required: true
            description: "O identificador único da imagem que será excluída."
            schema: 
              type: "string"
        x-amazon-apigateway-integration: 
          uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:170387992571:function:${stageVariables.Stage}-deleteImage/invocations"
          passthroughBehavior: "when_no_match"
          httpMethod: "DELETE"
          type: "aws_proxy"
        responses: 
          200: 
            description: "Imagem excluída com sucesso."
            content: 
              application/json: 
                schema: 
                  type: "object"
                  properties: 
                    message: 
                      type: "string"
                      example: "Imagem excluída com sucesso."
            headers: 
              Access-Control-Allow-Origin: 
                $ref: "#/components/headers/Access-Control-Allow-Origin"
              Access-Control-Allow-Methods: 
                $ref: "#/components/headers/Access-Control-Allow-Methods"
              Access-Control-Allow-Headers: 
                $ref: "#/components/headers/Access-Control-Allow-Headers"
          400: 
            description: "Requisição inválida. Verifique o ID informado."
            content: 
              application/json: 
                schema: 
                  $ref: "#/components/schemas/BadRequest"
          401: 
            description: "Não autorizado. Token de autenticação inválido ou ausente."
            content: 
              application/json: 
                schema: 
                  $ref: "#/components/schemas/Unauthorized"
          404: 
            description: "Imagem não encontrada."
            content: 
              application/json: 
                schema: 
                  $ref: "#/components/schemas/NotFound"
          500: 
            description: "Erro interno do servidor."
            content: 
              application/json: 
                schema: 
                  $ref: "#/components/schemas/InternalServer"
      options: 
        summary: "CORS support"
        description: "Enable CORS by returning correct headers\n"
        tags: 
          - "CORS"
        responses: 
          200: 
            description: "Default response for CORS method"
            headers: 
              Access-Control-Allow-Origin: 
                schema: 
                  type: "string"
              Access-Control-Allow-Methods: 
                schema: 
                  type: "string"
              Access-Control-Allow-Headers: 
                schema: 
                  type: "string"
            content: {}
          400: 
            $ref: "#/components/schemas/BadRequest"
            headers: 
              Access-Control-Allow-Origin: 
                schema: 
                  type: "string"
              Access-Control-Allow-Methods: 
                schema: 
                  type: "string"
              Access-Control-Allow-Headers: 
                schema: 
                  type: "string"
          409: 
            $ref: "#/components/schemas/Conflict"
            headers: 
              Access-Control-Allow-Origin: 
                schema: 
                  type: "string"
              Access-Control-Allow-Methods: 
                schema: 
                  type: "string"
              Access-Control-Allow-Headers: 
                schema: 
                  type: "string"
          500: 
            $ref: "#/components/schemas/InternalServer"
            headers: 
              Access-Control-Allow-Origin: 
                schema: 
                  type: "string"
              Access-Control-Allow-Methods: 
                schema: 
                  type: "string"
              Access-Control-Allow-Headers: 
                schema: 
                  type: "string"
        x-amazon-apigateway-integration: 
          type: "mock"
          requestTemplates: 
            application/json: "{\n  \"statusCode\" : 200\n}\n"
          responses: 
            default: 
              statusCode: "200"
              responseParameters: 
                method.response.header.Access-Control-Allow-Headers: "'X-Requested-With,Accept,Origin,Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                method.response.header.Access-Control-Allow-Methods: "'*'"
                method.response.header.Access-Control-Allow-Origin: "'*'"
              responseTemplates: 
                application/json: "{}\n"
    /image/picture/{imageId}: 
      put: 
        description: "Esta API é utilizada para submeter foto da Image.\nNecessário informar a foto no corpo da requisição.\n\n| Atributo        | Descrição          | Tipo(tamanho)        | Obrigatório |\n|------------------|--------------------|-----------------------|-------------|\n| picImage       | Imagem do mapa     | MultiPart-Form/Data   | Sim         |\n| imageId        | ID do mapa         | Path (string)         | Sim         |\n"
        operationId: "putImagePicture"
        summary: "Envio de foto do mapa"
        security: 
          - 
            bearerAuth: []
        tags: 
          - "Image"
        parameters: 
          - 
            name: "imageId"
            in: "path"
            required: true
            description: "O ID único da Image que será atualizada"
            schema: 
              type: "string"
        requestBody: 
          required: true
          content: 
            multipart/form-data: 
              schema: 
                type: "object"
                properties: 
                  picImage: 
                    type: "string"
                    format: "binary"
                    description: "A imagem que será enviada"
                required: 
                  - "picImage"
        x-amazon-apigateway-integration: 
          uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:170387992571:function:${stageVariables.Stage}-putImagePicture/invocations"
          payloadFormatVersion: "2.0"
          type: "aws_proxy"
          httpMethod: "POST"
        responses: 
          200: 
            description: "Enviado com sucesso"
            content: 
              application/json: 
                schema: 
                  $ref: "#/components/schemas/Ok"
            headers: 
              Access-Control-Allow-Origin: 
                $ref: "#/components/headers/Access-Control-Allow-Origin"
              Access-Control-Allow-Methods: 
                $ref: "#/components/headers/Access-Control-Allow-Methods"
              Access-Control-Allow-Headers: 
                $ref: "#/components/headers/Access-Control-Allow-Headers"
          400: 
            description: "BadRequest"
            content: 
              application/json: 
                schema: 
                  $ref: "#/components/schemas/BadRequest"
          401: 
            description: "Unauthorized"
            content: 
              application/json: 
                schema: 
                  $ref: "#/components/schemas/Unauthorized"
          404: 
            description: "NotFound"
            content: 
              application/json: 
                schema: 
                  $ref: "#/components/schemas/NotFound"
          500: 
            description: "InternalServer"
            content: 
              application/json: 
                schema: 
                  $ref: "#/components/schemas/InternalServer"
      options: 
        summary: "CORS support"
        description: "Enable CORS by returning correct headers\n"
        tags: 
          - "CORS"
        responses: 
          200: 
            description: "Default response for CORS method"
            headers: 
              Access-Control-Allow-Origin: 
                schema: 
                  type: "string"
              Access-Control-Allow-Methods: 
                schema: 
                  type: "string"
              Access-Control-Allow-Headers: 
                schema: 
                  type: "string"
            content: {}
          400: 
            $ref: "#/components/schemas/BadRequest"
            headers: 
              Access-Control-Allow-Origin: 
                schema: 
                  type: "string"
              Access-Control-Allow-Methods: 
                schema: 
                  type: "string"
              Access-Control-Allow-Headers: 
                schema: 
                  type: "string"
          409: 
            $ref: "#/components/schemas/Conflict"
            headers: 
              Access-Control-Allow-Origin: 
                schema: 
                  type: "string"
              Access-Control-Allow-Methods: 
                schema: 
                  type: "string"
              Access-Control-Allow-Headers: 
                schema: 
                  type: "string"
          500: 
            $ref: "#/components/schemas/InternalServer"
            headers: 
              Access-Control-Allow-Origin: 
                schema: 
                  type: "string"
              Access-Control-Allow-Methods: 
                schema: 
                  type: "string"
              Access-Control-Allow-Headers: 
                schema: 
                  type: "string"
        x-amazon-apigateway-integration: 
          type: "mock"
          requestTemplates: 
            application/json: "{\n  \"statusCode\" : 200\n}\n"
          responses: 
            default: 
              statusCode: "200"
              responseParameters: 
                method.response.header.Access-Control-Allow-Headers: "'X-Requested-With,Accept,Origin,Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                method.response.header.Access-Control-Allow-Methods: "'*'"
                method.response.header.Access-Control-Allow-Origin: "'*'"
              responseTemplates: 
                application/json: "{}\n"
    /image: 
      post: 
        description: "Esta API é utilizada para cadastrar uma nova imagem no sistema.\nÉ necessário informar os atributos da imagem no corpo da requisição.\n\n**Atributos Requeridos no Corpo da Requisição:**\n\n| Atributo       | Descrição                                              | Tipo         | Obrigatório |\n|----------------|--------------------------------------------------------|--------------|-------------|\n| imageId        | Identificador único da imagem.                         | String       | Sim         |\n| imageUrl       | URL da imagem correspondente.                          | String       | Sim         |\n| title          | Título da imagem.                                      | String       | Sim         |\n| description    | Descrição detalhada da imagem.                         | String       | Não         |\n| type           | Tipo do componente gráfico (ex.: \"thumbnail\").         | String       | Sim         |\n| tags           | Lista de tags associadas à imagem para busca.          | List<String> | Não         |\n| language       | Idioma dos dados relacionados à imagem.                | String       | Não         |\n| modified       | Data/hora da última modificação (formato ISO 8601).    | String       | Não         |\n| created        | Data/hora de criação da imagem (formato ISO 8601).     | String       | Sim         |\n| createdBy      | Identificador do criador da imagem.                    | String       | Sim         |\n"
        operationId: "postImage"
        summary: "Cadastra uma nova imagem no sistema"
        security: 
          - 
            bearerAuth: []
        tags: 
          - "Image"
        x-amazon-apigateway-integration: 
          uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:170387992571:function:${stageVariables.Stage}-postImage/invocations"
          passthroughBehavior: "when_no_match"
          httpMethod: "POST"
          type: "aws_proxy"
        requestBody: 
          required: true
          content: 
            application/json: 
              schema: 
                $ref: "#/components/schemas/Image"
        responses: 
          200: 
            description: "Imagem cadastrada com sucesso."
            content: 
              application/json: 
                schema: 
                  $ref: "#/components/schemas/Image"
            headers: 
              Access-Control-Allow-Origin: 
                $ref: "#/components/headers/Access-Control-Allow-Origin"
              Access-Control-Allow-Methods: 
                $ref: "#/components/headers/Access-Control-Allow-Methods"
              Access-Control-Allow-Headers: 
                $ref: "#/components/headers/Access-Control-Allow-Headers"
          400: 
            description: "Requisição inválida. Verifique os atributos informados."
            content: 
              application/json: 
                schema: 
                  $ref: "#/components/schemas/BadRequest"
          401: 
            description: "Não autorizado. Token de autenticação inválido ou ausente."
            content: 
              application/json: 
                schema: 
                  $ref: "#/components/schemas/Unauthorized"
          404: 
            description: "Recurso não encontrado."
            content: 
              application/json: 
                schema: 
                  $ref: "#/components/schemas/NotFound"
          500: 
            description: "Erro interno do servidor."
            content: 
              application/json: 
                schema: 
                  $ref: "#/components/schemas/InternalServer"
      options: 
        summary: "CORS support"
        description: "Enable CORS by returning correct headers\n"
        tags: 
          - "CORS"
        responses: 
          200: 
            description: "Default response for CORS method"
            headers: 
              Access-Control-Allow-Origin: 
                schema: 
                  type: "string"
              Access-Control-Allow-Methods: 
                schema: 
                  type: "string"
              Access-Control-Allow-Headers: 
                schema: 
                  type: "string"
            content: {}
          400: 
            $ref: "#/components/schemas/BadRequest"
            headers: 
              Access-Control-Allow-Origin: 
                schema: 
                  type: "string"
              Access-Control-Allow-Methods: 
                schema: 
                  type: "string"
              Access-Control-Allow-Headers: 
                schema: 
                  type: "string"
          409: 
            $ref: "#/components/schemas/Conflict"
            headers: 
              Access-Control-Allow-Origin: 
                schema: 
                  type: "string"
              Access-Control-Allow-Methods: 
                schema: 
                  type: "string"
              Access-Control-Allow-Headers: 
                schema: 
                  type: "string"
          500: 
            $ref: "#/components/schemas/InternalServer"
            headers: 
              Access-Control-Allow-Origin: 
                schema: 
                  type: "string"
              Access-Control-Allow-Methods: 
                schema: 
                  type: "string"
              Access-Control-Allow-Headers: 
                schema: 
                  type: "string"
        x-amazon-apigateway-integration: 
          type: "mock"
          requestTemplates: 
            application/json: "{\n  \"statusCode\" : 200\n}\n"
          responses: 
            default: 
              statusCode: "200"
              responseParameters: 
                method.response.header.Access-Control-Allow-Headers: "'X-Requested-With,Accept,Origin,Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                method.response.header.Access-Control-Allow-Methods: "'*'"
                method.response.header.Access-Control-Allow-Origin: "'*'"
              responseTemplates: 
                application/json: "{}\n"
  x-amazon-apigateway-binary-media-types: 
    - "multipart/form-data"
    - "image/jpeg"
  x-amazon-apigateway-gateway-responses: 
    INVALID_API_KEY: 
      statusCode: 403
      responseParameters: 
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
      responseTemplates: 
        application/json: "{\n    \"message\": {\n        \"text\": \"Api Key inválida.\",\n        \"type\": \"error\",\n        \"status\": 403\n    }\n}"
    RESOURCE_NOT_FOUND: 
      statusCode: 405
      responseParameters: 
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
      responseTemplates: 
        application/json: "{\n    \"message\": {\n        \"text\": \"Recurso não encontrado, favor conferir a documentação.\",\n        \"type\": \"error\",\n        \"status\": 405\n    }\n}"
    QUOTA_EXCEEDED: 
      statusCode: 429
      responseParameters: 
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
      responseTemplates: 
        application/json: "{\n    \"message\": {\n        \"text\": \"Limite de requisições atingido.\",\n        \"type\": \"error\",\n        \"status\": 429\n    }\n}"
    API_CONFIGURATION_ERROR: 
      statusCode: 502
      responseParameters: 
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
      responseTemplates: 
        application/json: "{\n    \"message\": {\n        \"text\": \"Endpoint não encontrado, favor conferir a documentação.\",\n        \"type\": \"error\",\n        \"status\": 502\n    }\n}"
    INTEGRATION_TIMEOUT: 
      statusCode: 504
      responseParameters: 
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
      responseTemplates: 
        application/json: "{\n    \"message\": {\n        \"text\": \"Tempo limite de integração atingido, por favor tente novamente.\",\n        \"type\": \"error\",\n        \"status\": 504\n    }\n}"
  components: 
    securitySchemes: 
      bearerAuth: 
        type: "http"
        scheme: "bearer"
        bearerFormat: "JWT"
      apiKeyAuth: 
        type: "apiKey"
        in: "header"
        name: "x-api-key"
    schemas: 
      User: 
        type: "object"
        properties: 
          userId: 
            description: "ID do usuário"
            example: "12345678-1234-1234-1234-123456789012"
            format: "uuid"
            type: "string"
          firstName: 
            description: "Primeiro nome do usuário"
            example: "Nome"
            type: "string"
          lastName: 
            description: "Sobrenome do usuário"
            example: "Sobrenome"
            type: "string"
          federalTax: 
            description: "CPF do usuário"
            example: "12345678900"
            type: "string"
          RG: 
            description: "RG do usuário"
            example: "1234567890"
            type: "string"
          email: 
            description: "Email do usuário"
            example: "nome_sobrenome@mail.com"
            type: "string"
          phone: 
            description: "Telefone do usuário"
            example: "5500012345678"
            type: "string"
          mobilePhone: 
            description: "Telefone celular do usuário"
            example: "5500912345678"
            type: "string"
          notify: 
            description: "Disponibilidade para enviar notificação"
            example: true
            type: "boolean"
          locale: 
            description: "Linguagem utilizada pelo usuário"
            example: "PT-BR"
            type: "string"
          sumRatingShipper: 
            description: "Média das avaliações de emitente"
            example: "4.6"
            type: "string"
          sumRatingShipment: 
            description: "Média das avaliações de remessas"
            example: "4.7"
            type: "string"
          sumRatingDestinator: 
            description: "Média das avaliações do destinatario"
            example: "4.8"
            type: "string"
          sumRatingDriver: 
            description: "Média das avaliações do motorista"
            example: "4.8"
            type: "string"
          isDriver: 
            description: "Definição de motorista"
            example: false
            type: "boolean"
          license: 
            description: "CNH do usuário"
            example: "123456789012345"
            type: "string"
          disability: 
            description: "Possível deficiência"
            example: "Deficiência visual, auditiva, física"
            type: "string"
          license_valid: 
            description: "Data da validade da CNH do motorista"
            example: "2020-07-15T"
            format: "date"
            type: "string"
          category: 
            description: "Categoria da CNH do motorista"
            example: "B"
            type: "string"
          emiter: 
            description: "Emitente da CNH do motorista"
            example: "ABCABC-ABC"
            type: "string"
          birthDate: 
            description: "Data de nascimento do usuário"
            example: "DD/MM/AAAA"
            type: "string"
          vehicle: 
            description: "Veículo atual do usuário"
            type: "object"
            $ref: "#/components/schemas/Vehicle"
          address: 
            description: "Endereço do usuário"
            type: "object"
            $ref: "#/components/schemas/Address"
      UserResponse: 
        type: "object"
        properties: 
          message: 
            $ref: "#/components/schemas/Message"
          content: 
            $ref: "#/components/schemas/User"
      UserHistory: 
        $ref: "../schemas/users/user_history.yml"
      CreateUser: 
        type: "object"
        properties: 
          firstName: 
            description: "Primeiro nome do usuário"
            example: "Nome"
            type: "string"
          lastName: 
            description: "Sobrenome do usuário"
            example: "Sobrenome"
            type: "string"
          federalTax: 
            description: "CPF do usuário"
            example: "12345678900"
            type: "string"
          password: 
            description: "Senha do usuário"
            example: "Senh@Exemplo123"
            type: "string"
            format: "password"
          mobilePhone: 
            description: "Telefone celular do usuário"
            example: "5500912345678"
            type: "string"
          notify: 
            description: "Disponibilidade para enviar notificação"
            example: true
            type: "boolean"
          disability: 
            description: "Possível deficiência"
            example: "Deficiência visual, auditiva, física"
            type: "string"
          created: 
            example: "2020-07-15T20:45:23.506-0300"
            format: "date-time"
            type: "string"
          address: 
            description: "Endereco do usuário"
            type: "object"
            $ref: "#/components/schemas/CreateAddress"
          users: 
            description: "Lista de usuários"
            type: "array"
            items: 
              description: "Objeto de criação do usuário"
              type: "object"
              $ref: "#/components/schemas/CreateUser"
        required: 
          - "firstName"
          - "lastName"
          - "federalTax"
          - "password"
          - "mobilePhone"
      UpdateUser: 
        type: "object"
        properties: 
          email: 
            description: "Email do usuário"
            example: "nome_sobrenome@mail.com"
            type: "string"
          phone: 
            description: "Telefone do usuário"
            example: "550012345678"
            type: "string"
          mobilePhone: 
            description: "Telefone celular do usuário"
            example: "55000912345678"
            type: "string"
          notify: 
            description: "Disponibilidade para enviar notificação"
            example: true
            type: "boolean"
          disability: 
            description: "Possível deficiência"
            example: "Deficiência visual, auditiva, física"
            type: "string"
          isDriver: 
            description: "Definição de motorista"
            example: false
            type: "boolean"
          license: 
            description: "CNH do usuário"
            example: "123456789012345"
            type: "string"
          licenseValid: 
            description: "Data da validade da CNH do motorista"
            example: "2020-07-15T"
            format: "date"
            type: "string"
          category: 
            description: "Categoria da CNH do motorista"
            example: "B"
            type: "string"
          emiter: 
            description: "Emitente da CNH do motorista"
            example: "ABCABC-ABC"
            type: "string"
          locale: 
            description: "Linguagem utilizada pelo usuário"
            example: "PT-BR"
            type: "string"
          modified: 
            example: "2020-07-15T20:45:23.506-0300"
            format: "date-time"
            type: "string"
          address: 
            description: "Endereco do usuário"
            type: "object"
            oneOf: 
              - 
                $ref: "#/components/schemas/CreateAddress"
              - 
                $ref: "#/components/schemas/UpdateAddress"
      UpdateUserStatus: 
        type: "object"
        properties: 
          state: 
            description: "Estado do usuário"
            example: "0: Offline; 1:Idle; 2:On Duty; 3:Online"
            format: "int-32"
            type: "number"
            items: 
              enum: 
                - 0
                - 1
                - 2
                - 3
          latitude: 
            description: "Latitude do endereço"
            example: "-28.793043370422325"
            type: "string"
          longitude: 
            description: "Longitude do endereço"
            example: "-51.605825771273764"
            type: "string"
          modified: 
            example: "2020-07-15T20:45:23.506-0300"
            format: "date-time"
            type: "string"
      UpdateUserDriverMetrics: 
        $ref: "../schemas/users/user_driver_metrics.yml"
      UserDriverMetricsResponse: 
        $ref: "../schemas/users/user_driver_metrics_response.yml"
      VerifyUser: 
        type: "object"
        properties: 
          mobilePhone: 
            description: "Telefone celular do usuário"
            example: "5500912345678"
            type: "string"
          oneTimePassword: 
            description: "Codigo de verificação do dispositivo telefone celular do usuário"
            example: "123456"
            type: "string"
            format: "string"
      GenerateOneTimePassword: 
        type: "object"
        properties: 
          mobilePhone: 
            description: "Telefone celular do usuário"
            example: "5500912345678"
            type: "string"
      CreateClientUser: 
        $ref: "../schemas/users/create_client_user_relation.yml"
      StreamUser: 
        $ref: "../schemas/users/stream_user.yml"
      VerifyPassword: 
        type: "object"
        properties: 
          federalTax: 
            description: "CPF do usuário"
            example: "12345678900"
            type: "string"
          password: 
            description: "Senha do usuário"
            example: "Senh@Exemplo123"
            type: "string"
            format: "password"
          oneTimePassword: 
            description: "Codigo de verificação do dispositivo telefone celular do usuário"
            example: "123456"
            type: "string"
            format: "string"
        required: 
          - "federalTax"
          - "password"
          - "oneTimePassword"
      Worker: 
        $ref: "../schemas/users/worker.yml"
      WorkersResponse: 
        type: "object"
        properties: 
          message: 
            $ref: "#/components/schemas/Message"
          content: 
            type: "array"
            items: 
              $ref: "#/components/schemas/Worker"
      SumShipmentsUnitloads: 
        $ref: "../schemas/users/sum_shipments_unitloads.yml"
      LoginUser: 
        type: "object"
        properties: 
          mobilePhone: 
            description: "Telefone celular do usuário"
            example: "5500912345678"
            type: "string"
          password: 
            description: "Senha do usuário"
            example: "Senh@Exemplo123"
            type: "string"
            format: "password"
          type: 
            description: "Tipo do dispositivo"
            example: "mob/web"
            type: "string"
      LoginClient: 
        $ref: "../schemas/login/login_client.yml"
      Token: 
        $ref: "../schemas/login/token.yml"
      CreatePodPic: 
        $ref: "../schemas/docs/create_pod_pic.yml"
      Message: 
        properties: 
          text: 
            description: "Texto de retorno"
            example: "Texto de retorno exemplo SUCESSO - OK/CREATED/NO_CONTENT."
            type: "string"
          type: 
            description: "Tipo da mensagem"
            example: "success"
            type: "string"
          status: 
            description: "Status complementar ao tipo."
            example: 200
            type: "number"
            format: "int-32"
      Ok: 
        properties: 
          message: 
            properties: 
              text: 
                description: "Texto de retorno"
                example: "Texto de retorno exemplo SUCESSO - OK / CREATED / NO_CONTENT."
                type: "string"
              type: 
                description: "Tipo da mensagem"
                example: "success"
                type: "string"
              status: 
                description: "Status complementar ao tipo."
                example: 200
                type: "number"
                format: "int-32"
      BadRequest: 
        properties: 
          message: 
            properties: 
              text: 
                description: "Texto de retorno"
                example: "Texto de retorno exemplo AVISO - BAD_REQUEST."
                type: "string"
              type: 
                description: "Tipo da mensagem"
                example: "warning"
                type: "string"
              status: 
                description: "Status complementar ao tipo."
                example: 400
                type: "number"
                format: "int-32"
      Unauthorized: 
        properties: 
          message: 
            properties: 
              text: 
                description: "Texto de retorno"
                example: "Texto de retorno exemplo AVISO - UNAUTHORIZED."
                type: "string"
              type: 
                description: "Tipo da mensagem"
                example: "warning"
                type: "string"
              status: 
                description: "Status complementar ao tipo."
                example: 401
                type: "number"
                format: "int-32"
      Forbidden: 
        properties: 
          message: 
            properties: 
              text: 
                description: "Texto de retorno"
                example: "Texto de retorno exemplo AVISO - FORBIDDEN."
                type: "string"
              type: 
                description: "Tipo da mensagem"
                example: "warning"
                type: "string"
              status: 
                description: "Status complementar ao tipo."
                example: 403
                type: "number"
                format: "int-32"
      NotFound: 
        properties: 
          message: 
            properties: 
              text: 
                description: "Texto de retorno"
                example: "Texto de retorno exemplo AVISO - NOT_FOUND."
                type: "string"
              type: 
                description: "Tipo da mensagem"
                example: "warning"
                type: "string"
              status: 
                description: "Status complementar ao tipo."
                example: 404
                type: "number"
                format: "int-32"
      Conflict: 
        properties: 
          message: 
            properties: 
              text: 
                description: "Texto de retorno"
                example: "Texto de retorno exemplo AVISO - CONFLICT."
                type: "string"
              type: 
                description: "Tipo da mensagem"
                example: "warning"
                type: "string"
              status: 
                description: "Status complementar ao tipo."
                example: 409
                type: "number"
                format: "int-32"
      InternalServer: 
        properties: 
          message: 
            properties: 
              text: 
                description: "Texto de retorno"
                example: "Texto de retorno exemplo ERRO - INTERNAL_SERVER."
                type: "string"
              type: 
                description: "Tipo da mensagem"
                example: "error"
                type: "string"
              status: 
                description: "Status complementar ao tipo."
                example: 500
                type: "number"
                format: "int-32"
      CreateBoardingIntegration: 
        $ref: "../schemas/active_integration/boarding_integration/create_boarding_integration.yml"
    headers: 
      Access-Control-Allow-Origin: 
        schema: 
          description: "Acesso à origem"
          type: "string"
      Access-Control-Allow-Methods: 
        schema: 
          description: "Acesso aos metodos"
          type: "string"
      Access-Control-Allow-Headers: 
        schema: 
          description: "Acesso aos cabeçalhos"
          type: "string"

